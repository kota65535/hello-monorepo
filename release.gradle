def writeVersionFile(version) {
    File f = file("gradle.properties")
    String s = f.getText().replaceFirst(/version = .*/, "version = ${version}")
    f.setText(s)
}

task setReleaseVersion {
    doFirst {
        def matcher = version =~ /^(\d+)\.(\d+)\.(\d+)-SNAPSHOT$/
        assert matcher.matches()
        def (major, minor, patch) = matcher[0][1..3].collect { v -> v as Integer}
        // set new version
        version = "${major}.${minor}.${patch}"
        writeVersionFile(version)
    }
    doLast {
        def tag = "v${version}"
        exec { commandLine "git", "add", "gradle.properties" }
        exec { commandLine "git", "commit", "-m", "prepare release ${tag}" }
        exec { commandLine "git", "tag", "${tag}" }
    }
}

task setDevelopmentVersion {
    doFirst {
        def matcher = version =~ /^(\d+)\.(\d+)\.(\d+)$/
        assert matcher.matches()
        def (major, minor, patch) = matcher[0][1..3].collect { v -> v as Integer}
        // set new version
        version = "${major}.${minor}.${patch + 1}-SNAPSHOT"
        writeVersionFile(version)
    }
    doLast {
        exec { commandLine "git", "add", "gradle.properties" }
        exec { commandLine "git", "commit", "-m", "prepare for next development iteration" }
    }
}

// Preparation for release.
// - set release version & tag
// - build
// - push
task prepareRelease {
    dependsOn setReleaseVersion, build
    doFirst {
        def tag = "v${version}"
        exec { commandLine "git", "push", "origin", "HEAD" }
        exec { commandLine "git", "push", "origin", "${tag}" }
    }
}

// Perform release.
// - publish
// - set next development version
// - push
task performRelease {
    dependsOn subprojects*.tasks.publish, setDevelopmentVersion
    doFirst {
        exec { commandLine "git", "push", "origin", "HEAD" }
    }
}
